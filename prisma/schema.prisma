generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int            @id @default(autoincrement())
  name           String
  street         String
  township       String
  city           String
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  locations      Location[]
  menuCategories MenuCategory[]
  User           User[]
}

model Location {
  id                           Int                            @id @default(autoincrement())
  name                         String
  street                       String
  township                     String
  city                         String
  latitude                     String?
  longitude                    String?
  companyId                    Int
  isSelected                   Boolean                        @default(false)
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  disabledLocationMenu         DisabledLocationMenu[]
  disabledLocationMenuCategory DisabledLocationMenuCategory[]
  company                      Company                        @relation(fields: [companyId], references: [id])
  tables                       Table[]
  Promotion                    Promotion[]
}

model MenuCategory {
  id                           Int                            @id @default(autoincrement())
  name                         String
  companyId                    Int
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  disabledLocationMenuCategory DisabledLocationMenuCategory[]
  company                      Company                        @relation(fields: [companyId], references: [id])
  menuCategoryMenu             MenuCategoryMenu[]
}

model DisabledLocationMenuCategory {
  id             Int          @id @default(autoincrement())
  locationId     Int
  menuCategoryId Int
  location       Location     @relation(fields: [locationId], references: [id])
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
}

model Menu {
  id                   Int                    @id @default(autoincrement())
  name                 String
  price                Int                    @default(0)
  description          String?
  assetUrl             String?
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  disabledLocationMenu DisabledLocationMenu[]
  menuAddonCategory    MenuAddonCategory[]
  menuCategoryMenu     MenuCategoryMenu[]
  Order                Order[]
  Receipt              Receipt[]
  PromotionMenu        PromotionMenu[]
  FocMenu              FocMenu[]
  FocMenuAddonCategory FocMenuAddonCategory[]
}

model DisabledLocationMenu {
  id         Int      @id @default(autoincrement())
  locationId Int
  menuId     Int
  location   Location @relation(fields: [locationId], references: [id])
  menu       Menu     @relation(fields: [menuId], references: [id])
}

model MenuCategoryMenu {
  id             Int          @id @default(autoincrement())
  menuCategoryId Int
  menuId         Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
  menu           Menu         @relation(fields: [menuId], references: [id])
}

model AddonCategory {
  id                   Int                    @id @default(autoincrement())
  name                 String
  isRequired           Boolean                @default(true)
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  addons               Addon[]
  menuAddonCategory    MenuAddonCategory[]
  FocMenuAddonCategory FocMenuAddonCategory[]
}

model MenuAddonCategory {
  id              Int           @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  addonCategory   AddonCategory @relation(fields: [addonCategoryId], references: [id])
  menu            Menu          @relation(fields: [menuId], references: [id])
}

model Addon {
  id                   Int                    @id @default(autoincrement())
  name                 String
  price                Int                    @default(0)
  addonCategoryId      Int
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  addonCategory        AddonCategory          @relation(fields: [addonCategoryId], references: [id])
  Order                Order[]
  Receipt              Receipt[]
  FocMenuAddonCategory FocMenuAddonCategory[]
}

model Table {
  id             Int              @id @default(autoincrement())
  name           String
  locationId     Int
  isArchived     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  orders         Order[]
  location       Location         @relation(fields: [locationId], references: [id])
  Notification   Notification[]
  Receipt        Receipt[]
  PromotionUsage PromotionUsage[]
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String?
  image     String?
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
}

model Order {
  id           Int         @id @default(autoincrement())
  menuId       Int
  addonId      Int?
  itemId       String
  quantity     Int
  paidQuantity Int         @default(0)
  orderSeq     String
  status       ORDERSTATUS
  totalPrice   Int
  subTotal     Int?
  tableId      Int
  instruction  String?
  isFoc        Boolean     @default(false)
  isArchived   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  addon        Addon?      @relation(fields: [addonId], references: [id])
  menu         Menu        @relation(fields: [menuId], references: [id])
  table        Table       @relation(fields: [tableId], references: [id])
}

enum ORDERSTATUS {
  PENDING
  COOKING
  COMPLETE
  PAID
  CANCELED
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  tableId   Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  table     Table    @relation(fields: [tableId], references: [id])
}

model Receipt {
  id         Int      @id @default(autoincrement())
  code       String
  tableId    Int
  itemId     String
  addonId    Int?
  menuId     Int
  subTotal   Int?
  totalPrice Int
  quantity   Int
  tax        Float
   isFoc     Boolean  @default(false)
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menu       Menu     @relation(fields: [menuId], references: [id])
  table      Table    @relation(fields: [tableId], references: [id])
  addon      Addon?   @relation(fields: [addonId], references: [id])
}

model Rating {
  id          Int      @id @default(autoincrement())
  receiptCode String   @unique
  rating      Int
  feedback    String?
  createdAt   DateTime @default(now())
}

model Promotion {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  discount_type        DISCOUNT
  discount_value       Int?
  totalPrice           Int?
  start_date           DateTime
  end_date             DateTime
  locationId           Int?
  is_active            Boolean                @default(true)
  conditions           Json?
  priority             Int                    @default(1)
  group                String?
  imageUrl             String?
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  location             Location?              @relation(fields: [locationId], references: [id])
  PromotionMenu        PromotionMenu[]
  FocCategory          FocCategory[]
  FocMenuAddonCategory FocMenuAddonCategory[]
  PromotionUsage       PromotionUsage[]
}

enum DISCOUNT {
  PERCENTAGE
  FIXED_AMOUNT
  FOCMENU
}

model PromotionMenu {
  id                Int       @id @default(autoincrement())
  promotionId       Int
  menuId            Int
  quantity_required Int
  promotion         Promotion @relation(fields: [promotionId], references: [id])
  menu              Menu      @relation(fields: [menuId], references: [id])
}

model FocCategory {
  id           Int       @id @default(autoincrement())
  minSelection Int
  promotionId  Int
  promotion    Promotion @relation(fields: [promotionId], references: [id])
  FocMenu      FocMenu[]
}

model FocMenu {
  id            Int         @id @default(autoincrement())
  menuId        Int
  focCategoryId Int
  menu          Menu        @relation(fields: [menuId], references: [id])
  focCategory   FocCategory @relation(fields: [focCategoryId], references: [id])
}

model FocMenuAddonCategory {
  id              Int           @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  addonId         Int
  promotionId     Int
  menu            Menu          @relation(fields: [menuId], references: [id])
  addonCategory   AddonCategory @relation(fields: [addonCategoryId], references: [id])
  addon           Addon         @relation(fields: [addonId], references: [id])
  promotion       Promotion     @relation(fields: [promotionId], references: [id])
}

model PromotionUsage {
  id          Int       @id @default(autoincrement())
  promotionId Int
  tableId     Int
  orderSeq    String
  table       Table     @relation(fields: [tableId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CanceledOrder {
  id        Int      @id @default(autoincrement())
  itemId    String
  reason    String
  userKnow  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int             @id @default(autoincrement())
  name           String
  street         String
  township       String
  city           String
  isArchived     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Locations      Location[]
  MenuCategories MenuCategory[]
  Supplier       Supplier[]
  User           User[]
  WarehouseItem  WarehouseItem[]
  AuditLog       AuditLog[]
}

model Location {
  id                           Int                            @id @default(autoincrement())
  name                         String
  street                       String
  township                     String
  city                         String
  latitude                     String?
  longitude                    String?
  companyId                    Int
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  DisabledLocationMenu         DisabledLocationMenu[]
  DisabledLocationMenuCategory DisabledLocationMenuCategory[]
  company                      Company                        @relation(fields: [companyId], references: [id])
  Promotion                    Promotion[]
  SelectedLocation             SelectedLocation[]
  Tables                       Table[]
  Warehouse                    Warehouse[]

  @@index([companyId])
}

model SelectedLocation {
  id         Int      @id @default(autoincrement())
  locationId Int
  userId     Int
  location   Location @relation(fields: [locationId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model MenuCategory {
  id                           Int                            @id @default(autoincrement())
  name                         String
  companyId                    Int
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  disabledLocationMenuCategory DisabledLocationMenuCategory[]
  company                      Company                        @relation(fields: [companyId], references: [id])
  MenuCategoryMenu             MenuCategoryMenu[]

  @@index([companyId])
}

model DisabledLocationMenuCategory {
  id             Int          @id @default(autoincrement())
  locationId     Int
  menuCategoryId Int
  location       Location     @relation(fields: [locationId], references: [id])
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
}

model Menu {
  id                   Int                    @id @default(autoincrement())
  name                 String
  price                Int                    @default(0)
  description          String?
  assetUrl             String?
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  disabledLocationMenu DisabledLocationMenu[]
  FocMenu              FocMenu[]
  FocMenuAddonCategory FocMenuAddonCategory[]
  MenuAddonCategory    MenuAddonCategory[]
  MenuCategoryMenu     MenuCategoryMenu[]
  MenuItemIngredient   MenuItemIngredient[]
  Order                Order[]
  PromotionMenu        PromotionMenu[]
  Receipt              Receipt[]
}

model DisabledLocationMenu {
  id         Int      @id @default(autoincrement())
  locationId Int
  menuId     Int
  location   Location @relation(fields: [locationId], references: [id])
  menu       Menu     @relation(fields: [menuId], references: [id])
}

model MenuCategoryMenu {
  id             Int          @id @default(autoincrement())
  menuCategoryId Int
  menuId         Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id])
  menu           Menu         @relation(fields: [menuId], references: [id])
}

model AddonCategory {
  id                   Int                    @id @default(autoincrement())
  name                 String
  isRequired           Boolean                @default(true)
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Addons               Addon[]
  FocMenuAddonCategory FocMenuAddonCategory[]
  menuAddonCategory    MenuAddonCategory[]
}

model MenuAddonCategory {
  id              Int           @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  addonCategory   AddonCategory @relation(fields: [addonCategoryId], references: [id])
  menu            Menu          @relation(fields: [menuId], references: [id])
}

model Addon {
  id                   Int                    @id @default(autoincrement())
  name                 String
  price                Int                    @default(0)
  addonCategoryId      Int
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  addonCategory        AddonCategory          @relation(fields: [addonCategoryId], references: [id])
  FocMenuAddonCategory FocMenuAddonCategory[]
  Order                Order[]
  Receipt              Receipt[]
  AddonIngredient      AddonIngredient[]
}

model Table {
  id             Int              @id @default(autoincrement())
  name           String
  locationId     Int
  isArchived     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Notification   Notification[]
  Orders         Order[]
  PromotionUsage PromotionUsage[]
  Receipt        Receipt[]
  location       Location         @relation(fields: [locationId], references: [id])

  @@index([locationId])
}

model User {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  name                     String?
  image                    String?
  companyId                Int
  SelectedLocation         SelectedLocation[]
  SelectedWarehouse        SelectedWarehouse[]
  company                  Company                    @relation(fields: [companyId], references: [id])
  AuditLog                 AuditLog[]
  PurchaseOrderHistory     PurchaseOrderHistory[]
  PurchaseOrderItemHistory PurchaseOrderItemHistory[]

  @@index([companyId])
}

model Order {
  id           Int         @id @default(autoincrement())
  menuId       Int
  addonId      Int?
  itemId       String
  quantity     Int
  paidQuantity Int         @default(0)
  orderSeq     String
  totalPrice   Int
  tableId      Int
  instruction  String?
  isFoc        Boolean     @default(false)
  isArchived   Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  subTotal     Int?
  status       OrderStatus
  addon        Addon?      @relation(fields: [addonId], references: [id])
  menu         Menu        @relation(fields: [menuId], references: [id])
  table        Table       @relation(fields: [tableId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  tableId   Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  table     Table    @relation(fields: [tableId], references: [id])
}

model Receipt {
  id         Int      @id @default(autoincrement())
  code       String
  tableId    Int
  itemId     String
  addonId    Int?
  menuId     Int
  totalPrice Int
  quantity   Int
  tax        Float
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subTotal   Int?
  isFoc      Boolean  @default(false)
  userKnown  Boolean  @default(false)
  orderSeq   String?
  addon      Addon?   @relation(fields: [addonId], references: [id])
  menu       Menu     @relation(fields: [menuId], references: [id])
  table      Table    @relation(fields: [tableId], references: [id])
}

model Rating {
  id          Int      @id @default(autoincrement())
  receiptCode String   @unique
  rating      Int
  feedback    String?
  createdAt   DateTime @default(now())
}

model Promotion {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  discount_value       Int?
  totalPrice           Int?
  start_date           DateTime
  end_date             DateTime
  locationId           Int
  is_active            Boolean                @default(true)
  conditions           Json?
  priority             Int                    @default(1)
  group                String?
  imageUrl             String?
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  discount_type        DiscountType
  FocCategory          FocCategory[]
  FocMenuAddonCategory FocMenuAddonCategory[]
  location             Location               @relation(fields: [locationId], references: [id])
  PromotionMenu        PromotionMenu[]
  PromotionUsage       PromotionUsage[]

  @@index([locationId])
}

model PromotionMenu {
  id                Int       @id @default(autoincrement())
  promotionId       Int
  menuId            Int
  quantity_required Int
  menu              Menu      @relation(fields: [menuId], references: [id])
  promotion         Promotion @relation(fields: [promotionId], references: [id])
}

model FocCategory {
  id           Int       @id @default(autoincrement())
  minSelection Int
  promotionId  Int
  promotion    Promotion @relation(fields: [promotionId], references: [id])
  FocMenu      FocMenu[]
}

model FocMenu {
  id            Int         @id @default(autoincrement())
  menuId        Int
  focCategoryId Int
  focCategory   FocCategory @relation(fields: [focCategoryId], references: [id])
  menu          Menu        @relation(fields: [menuId], references: [id])
}

model FocMenuAddonCategory {
  id              Int           @id @default(autoincrement())
  menuId          Int
  addonCategoryId Int
  addonId         Int
  promotionId     Int
  addonCategory   AddonCategory @relation(fields: [addonCategoryId], references: [id])
  addon           Addon         @relation(fields: [addonId], references: [id])
  menu            Menu          @relation(fields: [menuId], references: [id])
  promotion       Promotion     @relation(fields: [promotionId], references: [id])
}

model PromotionUsage {
  id          Int       @id @default(autoincrement())
  promotionId Int
  tableId     Int
  orderSeq    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  table       Table     @relation(fields: [tableId], references: [id])
}

model CanceledOrder {
  id        Int      @id @default(autoincrement())
  itemId    String
  reason    String
  userKnow  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id            Int             @id @default(autoincrement())
  name          String
  phone         String?
  email         String?
  address       String?
  isArchived    Boolean         @default(false)
  companyId     Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PurchaseOrder PurchaseOrder[]
  company       Company         @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model Warehouse {
  id                    Int                     @id @default(autoincrement())
  name                  String
  locationId            Int
  isArchived            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  DisabledWarehouseItem DisabledWarehouseItem[]
  PurchaseOrder         PurchaseOrder[]
  SelectedWarehouse     SelectedWarehouse[]
  StockMovement         StockMovement[]
  location              Location                @relation(fields: [locationId], references: [id])
  WarehouseStock        WarehouseStock[]

  @@index([locationId])
}

model SelectedWarehouse {
  id          Int       @id @default(autoincrement())
  userId      Int
  warehouseId Int
  user        User      @relation(fields: [userId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

model PurchaseOrder {
  id                       Int                        @id @default(autoincrement())
  code                     String                     @unique
  supplierId               Int
  status                   POStatus
  warehouseId              Int
  isEdited                 Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  supplier                 Supplier                   @relation(fields: [supplierId], references: [id])
  warehouse                Warehouse                  @relation(fields: [warehouseId], references: [id])
  PurchaseOrderItem        PurchaseOrderItem[]
  PurchaseOrderHistory     PurchaseOrderHistory[]
  PurchaseOrderItemHistory PurchaseOrderItemHistory[]
}

model PurchaseOrderItem {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  itemId          Int
  quantity        Int
  unitPrice       Float
  warehouseItem   WarehouseItem @relation(fields: [itemId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@unique([itemId, purchaseOrderId], name: "itemId_purchaseOrderId")
  @@index([itemId, purchaseOrderId])
}

model WarehouseItem {
  id                    Int                     @id @default(autoincrement())
  name                  String
  unit                  Unit
  unitCategory          UnitCategory
  companyId             Int
  threshold             Float
  isArchived            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  DisabledWarehouseItem DisabledWarehouseItem[]
  MenuItemIngredient    MenuItemIngredient[]
  PurchaseOrderItem     PurchaseOrderItem[]
  StockMovement         StockMovement[]
  company               Company                 @relation(fields: [companyId], references: [id])
  WarehouseStock        WarehouseStock[]
  AddonIngredient       AddonIngredient[]

  @@index([companyId])
}

model DisabledWarehouseItem {
  id            Int           @id @default(autoincrement())
  warehouseId   Int
  itemId        Int
  warehouseItem WarehouseItem @relation(fields: [itemId], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
}

model WarehouseStock {
  id            Int           @id @default(autoincrement())
  itemId        Int
  quantity      Int
  warehouseId   Int
  warehouseItem WarehouseItem @relation(fields: [itemId], references: [id])
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])

  @@unique([itemId, warehouseId], name: "itemId_warehouseId")
  @@index([itemId])
}

model StockMovement {
  id            Int             @id @default(autoincrement())
  itemId        Int
  type          MovementType
  quantity      Int
  reference     String?
  note          String?
  warehouseId   Int
  source        MovementSource
  createdAt     DateTime        @default(now())
  parentId      Int?
  warehouseItem WarehouseItem   @relation(fields: [itemId], references: [id])
  parent        StockMovement?  @relation("Correction", fields: [parentId], references: [id])
  corrections   StockMovement[] @relation("Correction")
  warehouse     Warehouse       @relation(fields: [warehouseId], references: [id])
}

model MenuItemIngredient {
  id            Int           @id @default(autoincrement())
  menuId        Int
  itemId        Int
  quantity      Float
  warehouseItem WarehouseItem @relation(fields: [itemId], references: [id])
  menu          Menu          @relation(fields: [menuId], references: [id])
}

model AddonIngredient {
  id            Int           @id @default(autoincrement())
  addonId       Int
  itemId        Int
  menuId        Int?
  extraQty      Float
  addon         Addon         @relation(fields: [addonId], references: [id])
  warehouseItem WarehouseItem @relation(fields: [itemId], references: [id])
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  companyId  Int
  userId     Int
  action     String // e.g., "UPDATE_PO", "CREATE_PO", "DELETE_PO"
  targetType String // e.g., "PurchaseOrder"
  targetId   Int // e.g., PurchaseOrder.id
  changes    Json? // e.g., { status: { old: "PENDING", new: "RECEIVED" } }
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model PurchaseOrderHistory {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  snapshot        Json
  updatedById     Int
  createdAt       DateTime      @default(now())
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  updatedBy       User          @relation(fields: [updatedById], references: [id])
}

model PurchaseOrderItemHistory {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  snapshot        Json
  updatedById     Int
  createdAt       DateTime      @default(now())
  updatedBy       User          @relation(fields: [updatedById], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
}

enum OrderStatus {
  PENDING
  COOKING
  COMPLETE
  PAID
  CANCELED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FOCMENU
}

enum POStatus {
  PENDING
  RECEIVED
  CANCELLED
}

enum MovementType {
  IN
  OUT
}

enum MovementSource {
  MANUAL
  PURCHASE_ORDER
  CUSTOMER_ORDER
}

enum UnitCategory {
  MASS
  VOLUME
  COUNT
}

enum Unit {
  G
  KG
  ML
  L
  VISS
  LB
  OZ
  GAL
  DOZ
  UNIT
}

enum UserType {
  ADMIN
  MANAGER
  CASHIER
  CHEF
  WAREHOUSESTAFF
  DEVELOPER
}